const width = 28 // squares
const grid = document.querySelector('.grid ')
const scoreDisplay = document.querySelector('#score') // or we can use .getElementById('id') and directly pass the ID without any # or.
let squares = []
let score = 0
// 28 squares horizontal by 28 squares vertical makes 784 squares total
// 0 - pac-dots
// 1 - wall
// 2 - ghost-lair
// 3 - power-pellet
// 4 - empty

const layout = [
   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
    1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
    1,3,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,3,1,
    1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
    1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,
    1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,
    1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
    1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,1,4,4,4,4,4,4,4,4,4,4,1,1,0,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,1,4,1,1,1,2,2,1,1,1,4,1,1,0,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,1,4,1,2,2,2,2,2,2,1,4,1,1,0,1,1,1,1,1,1,
    4,4,4,4,4,4,0,0,0,4,1,2,2,2,2,2,2,1,4,0,0,0,4,4,4,4,4,4,
    1,1,1,1,1,1,0,1,1,4,1,2,2,2,2,2,2,1,4,1,1,0,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,1,4,1,1,1,1,1,1,1,1,4,1,1,0,1,1,1,1,1,1,
    1,1,1,1,1,1,0,1,1,4,1,1,1,1,1,1,1,1,4,1,1,0,1,1,1,1,1,1,
    1,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,1,
    1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
    1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,
    1,3,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,3,1,
    1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,
    1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,
    1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,
    1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,
    1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 

]

// we will create the grid by using a for loop 

function createBoard(){
// loop through the layout, so as long as i is smaller than the length of the layout increment by one
  for(let i=0; i<layout.length; i++){
  // create the squares
    const square = document.createElement('div') // I am creating div
 // now put the squares in the grid
    grid.appendChild(square)
 // put square in squares array, which is empty
  squares.push(square) // remember push is to add stuff at th ebeginning of an array
// styling the layout with javascript (if/else)
   if (layout[i]=== 0){
      squares[i].classList.add('pac-dot')
   } else if(layout[i] === 1){
            squares[i].classList.add('wall')
        }
   else if(layout[i]=== 3){
            squares[i].classList.add('power-pellet')
        }
   else if (layout[i] === 2){
            squares[i].classList.add('ghost-lair')
        }
   }
}

//starting position of pacman
let pacmanCurrentIndex = 500

squares[pacmanCurrentIndex].classList.add('pacman')


//we add an event listener to the html document so that each time we press the key the control function is executed
document.addEventListener('keyup', contol())


// switch statement
// when a key code is pressed do the action defined (in this case console.log
// then break the function and go to the next

function control(e) {
    squares[pacmanCurrentIndex].classList.remove('pacman')
    switch(e.keyCode) {
        case 40:
        console.log('pressed down')
        if (
            !squares[pacmanCurrentIndex + width].classList.contains('ghost-lair') &&
            !squares[pacmanCurrentIndex + width].classList.contains('wall') &&
            pacmanCurrentIndex + width < width * width
            ) 
            pacmanCurrentIndex += width
        break
        case 38:
        console.log('pressed up')
        if (
            !squares[pacmanCurrentIndex - width].classList.contains('ghost-lair') &&
            !squares[pacmanCurrentIndex - width].classList.contains('wall') &&
            pacmanCurrentIndex - width >=0
            ) 
            pacmanCurrentIndex -= width
        break
        case 37: 
        console.log('pressed left')
        if( 
            !squares[pacmanCurrentIndex -1].classList.contains('ghost-lair')&&
            !squares[pacmanCurrentIndex -1].classList.contains('wall') &&
            pacmanCurrentIndex % width !==0
            ) 
            pacmanCurrentIndex -=1
            
        if(pacmanCurrentIndex === 364){
            pacmanCurrentIndex = 391
        }
        break
        case 39:
        console.log('pressed right')
        if(
            !squares[pacmanCurrentIndex +1].classList.contains('ghost-lair') &&
            !squares[pacmanCurrentIndex +1].classList.contains('wall') &&
            pacmanCurrentIndex % width < width -1
            ) 
            pacmanCurrentIndex +=1
        if(pacmanCurrentIndex === 391){
            pacmanCurrentIndex = 364
        }
        break
    }
    squares[pacmanCurrentIndex].classList.add('pacman')
    pacDocEaten()
    powerPelletEaten()
}

document.addEventListener('keyup', control)

 function pacDotEaten(){
    if(squares[pacmanCurrentIndex].classList.contains('pac-dot')){
         aquares[pacmanCurrentIndex].classList.remove('pac-dot')
         score ++1
         scoreDisplay.innerHTML= score
    }
 
 }
 
 
 class Ghost{
   constructor(classname, startIndex,speed){
      this.className = className
      this.startIndex = startIndex
      this.speed = speed
      this.currentIndex=startIndex
      this.isScared = false 
      this.timerId = NaN
      
   }
 
 }
  
  
function powerPelletEaten(){
  // if square[pacmanIndex] is the same as square[powerPellet]
  if(squares[pacmanCurrentIndex].classList.contains('power-pellet')){
  // we remove the class of powerpellet
  squares[pacmanCurrentIndex].classList.remove('power-pellet')
  // we add 10 points to the score
      score+= 10
 //we make each ghost scared by changing the property isScared to true, because now is sscared
      ghosts.forEach(ghost => ghost.iScared = true)
  //And we set a time out so ghosts become unscared after 10 seconds
      setTimeout(unScareGhosts(), 10000ms)
      
  }
 
}  
  
function unScareGhosts(){
   ghosts.forEach(ghost=> ghost.isScared = false)
}
  
  
  
  
const ghosts = [
   new Ghost ('blinky', 348, 250)
   new Ghost('pinky', 376, 400)
   new Ghost('inky',351 ,300 )
   new Ghost('clyde',379 ,500 )
]

ghosts.forEach(ghost => {
squares[ghost.startIndex]).classList.add(ghost.className)
squares[ghost.startIndex].classList.add('ghost') // invisible class

})


ghost.forEach(ghost=>moveGhost(ghost))

function moveGhost(ghost){
   // select the direction courses, up down left right
   const directions = [-1, +1, -width, +width]
   let direction = directions[Math.floor(Math.random()) * direction.length]
   
   ghost.timerId = setInterval(function(){
   //we check there is no wall and no ghost
      if( !squares[ghost.currentIndex + direction].classList.contains('wall') &&
          !squares[ghost.currentIndex +direction].classList.contains('ghost)
      ){
   
   //wherever in the square is the ghost remove its classname
      squares[ghost.currentIndex].classList.remove(ghost.className)
      // we also remove the scared ghost class if nto it will be leaving a trail
      squares[ghost.currentIndex].classList.remove('ghost', 'scared-ghost')
      // we add direction to the ghosts
      ghost.currentIndex += direction
      // and then we add the classname again
      squares[ghost.currentIndex].classList.remove(ghost.className)
      squares[ghost.currentIndex].classList.add('ghost')
   }
   else {
      direction = directions[Math.floor(Math.random()) * direction.length]
   }
   
   // if the ghost is scared then change the slyling to 'scared'
   // the deeply equals true is not necessary 100%
   if(ghost.isScared===true){
      squares[ghostCurrentIndex].classList.add('scared-ghost')
   }
   
   
   
   }, ghost.speed)
}

 
